{"componentChunkName":"component---src-templates-blog-post-js","path":"/atWork/use-lodash-es/","result":{"data":{"site":{"siteMetadata":{"title":"Today I Learned...","author":"장호현","siteUrl":"https://guest-01.github.io/TIL","comment":{"disqusShortName":"","utterances":"Guest-01/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"3207030e-5943-5d03-beb7-3f3f394dd4f4","excerpt":"배경 (약간의 TMI…","html":"<h3 id=\"배경-약간의-tmi\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD-%EC%95%BD%EA%B0%84%EC%9D%98-tmi\" aria-label=\"배경 약간의 tmi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배경 (약간의 TMI)</h3>\n<p>자바스크립트에는 꼭 있어야할 것 같은데 없는 함수나 메소드가 종종 있습니다. 대표적으로는, 두 오브젝트가 동일한 지 확인하는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \nobj <span class=\"token operator\">===</span> other<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false!</span></code></pre></div>\n<p>자바스크립트에서는 두 객체의 내용이 동일하더라도 별도로 선언된 것이라면 다른 객체로 봅니다. 이런 경우에는 <code class=\"language-text\">Object</code> 프로토타입에서 뭔가 비교할 수 있는 내장 메서드를 제공하는 것이 당연할 것 같지만 그런 것이 없습니다.</p>\n<p>그래서 이걸 굳이 구현하자면 <code class=\"language-text\">JSON</code>을 이용하는 방법이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 문자열로 변환 후 비교</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다행히 누군가가 이런 불편함을 위해 먼저 다양한 유틸함수들을 구현해두었는데, 이런 대표적인 유틸 함수 라이브러리가 바로 <code class=\"language-text\">lodash</code>입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">lodash</code>는 그냥 <code class=\"language-text\">import</code>해서 사용하면 번들 사이즈를 크게 잡아먹습니다.</p>\n<blockquote>\n<p><img src=\"https://yrnana.dev/_astro/lodash.15dc1d67_uuW15.webp\" alt=\"lodash-bundle-size\"></p>\n</blockquote>\n<p>왜냐하면 lodash에는 내가 사용하고 싶은 함수 외에도 수많은 유틸 함수들이 구현되어 있기 때문인데, 굳이 사용하지 않을 함수까지 포함하여 번들 사이즈를 크게 만들 이유가 없죠.</p>\n<p>프론트엔드 개발자에게 번들 사이즈란, 사용자가 보는 로딩 속도와 연관이 있으므로 관리하는 것이 필수입니다. 그렇다면 번들 사이즈를 줄이는 방법은 무엇이 있을까요?</p>\n<h3 id=\"tree-shaking\" style=\"position:relative;\"><a href=\"#tree-shaking\" aria-label=\"tree shaking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tree Shaking</h3>\n<p>현대 프론트엔드 개발에서는 작성한 JS 코드가 서버에 그대로 올라가는 경우는 드뭅니다. 보통 트랜스파일, 번들링 과정을 거쳐서 Minified된 버전이 최종적으로 서버에 올라갑니다. 따라서 이 과정에서 불필요한 코드(죽은 코드)를 제거할 수 있습니다. 이 과정을 <code class=\"language-text\">Tree Shaking</code>이라고 부릅니다.</p>\n<p>일반적으로 트리 쉐이킹은 우리가 흔히 사용하는 Webpack(Babel)이나 Vite와 같은 번들러가 알아서 해주기 때문에 우리가 사용할 함수만 명시적으로 <code class=\"language-text\">import</code>를 해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (x) lodash 전부를 불러오고 있음</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isEqual <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일반적으로는 옳은 방법 그러나...</span></code></pre></div>\n<p>하지만 lodash는 <strong>CommonJS</strong>라는 방식의 모듈 시스템을 이용하여 개발되었기 때문에, 두번째 방법으로 import하더라도 번들러가 트리 세이킹을 하기 어렵습니다. 이런 경우에 해결할 수 있는 방법 세가지가 있습니다.</p>\n<h3 id=\"1-babel-plugin-lodash\" style=\"position:relative;\"><a href=\"#1-babel-plugin-lodash\" aria-label=\"1 babel plugin lodash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) babel-plugin-lodash</h3>\n<p>이 방법은 import문을 require로 변환하는 babel에 lodash를 올바르게 tree-shaking할 수 있도록 도와주는 플러그인을 설치하는 것입니다. 자세한 설명은 <a href=\"https://github.com/lodash/babel-plugin-lodash%EB%A5%BC\">https://github.com/lodash/babel-plugin-lodash를</a> 참고하시기 바랍니다. 하지만 babel 설정을 직접 건드려야하기 때문에 아래 소개할 더 간편한 방법을 사용하는 것이 낫습니다.</p>\n<h3 id=\"2-cherry-picking\" style=\"position:relative;\"><a href=\"#2-cherry-picking\" aria-label=\"2 cherry picking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) cherry picking</h3>\n<p>애초에 from 절에 참조할 경로를 좁히는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> isEqual <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash/isEqual\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 하면 lodash 전체가 아닌 하위의 <code class=\"language-text\">isEqual</code>이 정의된 파일만 포함하므로 번들 사이즈가 줄어듭니다. 별도로 설치해야할 것이 없지만, 만일 불러올 함수가 많다면 <strong>일일이 한줄씩</strong> 불러와야하므로 역시 저는 선호하지 않습니다.</p>\n<h3 id=\"3-lodash-es\" style=\"position:relative;\"><a href=\"#3-lodash-es\" aria-label=\"3 lodash es permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) lodash-es</h3>\n<p>그래서 오늘의 핵심인 <code class=\"language-text\">lodash-es</code> 라이브러리를 소개합니다. 이 라이브러리는 lodash 대신 설치하여 사용하면 트리 쉐이킹을 가능하게 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isEqual <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash-es\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여러 함수를 불러온다고 해도 한줄에 다 쓸 수 있는 장점이 있고, 특별히 어떤 설정이 필요하지도 않습니다.</p>\n<p>앞으로 lodash를 종종 이용하게 될 것 같은데, <code class=\"language-text\">lodash-es</code>를 설치해서 사용하는 것이 번들 사이즈를 줄일 수 있겠습니다.</p>","frontmatter":{"title":"Lodash를 사용할 때 번들 사이즈 줄이기","date":"September 10, 2023"}}},"pageContext":{"slug":"/atWork/use-lodash-es/","previous":{"fields":{"slug":"/atWork/modern-file-api/"},"frontmatter":{"title":"프론트엔드에서 파일 입출력 다루기"}},"next":{"fields":{"slug":"/atWork/add-build-date/"},"frontmatter":{"title":"버전 관리를 위해 빌드된 날짜 삽입하기"}}}}}